name: Nodejs Entity service test 

on:
  push:
    branches:
      - "entity_v2"
    paths-ignore:
      - "deploy/**"

env:
  SERVICE_DIRECTORY: "."
  SERVICE_DIRECTORY_FPA: "/"
  ECR_REPO: "platform-solutions/test-arc"
  BRANCH: "entity_v2"

jobs:
  build-and-publish-shared-package:
    runs-on: ubuntu-latest
    outputs:
      pkg_version: ${{ steps.publish.outputs.pkg_version }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v1
        with:
          node-version: "14.x"
          registry-url: https://npm.pkg.github.com/
          scope: "@delhivery"
      - name: Installing dependencies
        run: npm ci
        working-directory: packages/shared
      - name: Building package
        run: npm run build
        working-directory: packages/shared
      - name: Publishing package
        id: publish
        working-directory: packages/shared
        run: |
          NEW_VERSION="$(cat package.json | jq -r .version)-$BRANCH"
          jq --arg new_version "$NEW_VERSION" '.version = $new_version' package.json > package-temp.json
          mv package-temp.json package.json
          echo "pkg_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          NAME="$(jq -r '.name' package.json)"
          OUTPUT=$(npm show --json $NAME)
          if echo $OUTPUT | jq -e '.versions | index("'${NEW_VERSION}'")' > /dev/null
          then
            :
          else
            npm publish
          fi
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
          BRANCH: ${{ env.BRANCH }}

  get-last-commit-id:
    runs-on: ubuntu-latest
    outputs:
      commit_id: ${{ steps.commit_id.outputs.commit }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Commit Id
        id: commit_id
        run: |
          commit_id=$(git rev-parse --short=7 HEAD)
          echo "commit=${commit_id}" >> $GITHUB_OUTPUT

  build-test-arc-server:
    runs-on: ubuntu-latest
    needs: [build-and-publish-shared-package, get-last-commit-id]
    outputs:
      app_version: ${{ steps.version.outputs.app_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get version
        id: version
        run: |
          version=$(jq -r .version $SERVICE_DIRECTORY_FPA/package.json )
          echo "app_version=${version}" >> $GITHUB_OUTPUT
      - name: Sync shared package version
        run: |
          version=${{ needs.build-and-publish-shared-package.outputs.pkg_version }}
          package_json=$(cat $SERVICE_DIRECTORY_FPA/package.json )
          updated_package_json=$(echo $package_json | jq --arg version $version '.dependencies["@delhivery/solutions-routing-fpa-shared"]=$version')
          echo $updated_package_json > $SERVICE_DIRECTORY_FPA/package.json
        env:
          BRANCH: ${{ env.BRANCH }}

      - name: Build Application Code of Routing FPA server
        uses: docker://ghcr.io/kciter/aws-ecr-action:latest
        with:
          access_key_id: ${{ secrets.PLATFORM_AWS_ACCESS_KEY_PREPROD}}
          secret_access_key: ${{ secrets.PLATFORM_AWS_SECRET_KEY_PREPROD }}
          account_id: ${{ secrets.PLATFORM_AWS_ACCOUNT_ID_PREPROD }}
          repo: ${{ env.ECR_REPO }}
          region: ${{ secrets.PLATFORM_AWS_REGION_PREPROD }}
          create_repo: true
          set_repo_policy: false
          image_scanning_configuration: true
          tags: ${{ steps.version.outputs.app_version }}-dev-${{ needs.get-last-commit-id.outputs.commit_id }}
          dockerfile: ${{ env.SERVICE_DIRECTORY_FPA }}/Dockerfile
          extra_build_args: "--build-arg F_GITHUB_TOKEN=${{ secrets.CICD_KEY}} --build-arg F_REGISTRY=${{ secrets.PLATFORM_AWS_ACCOUNT_ID_PREPROD }}.dkr.ecr.${{ secrets.PLATFORM_AWS_REGION_PREPROD }}.amazonaws.com/platform-infra/"
          path: ${{ env.SERVICE_DIRECTORY_FPA }}